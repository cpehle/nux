Characterization of the test environment in tn_testflow:

All testprograms are called by a test_function()-call with test_function() as a void function included in a header-file in tn_testflow.c (s2pp) and tn_compare.c(reference system).
The headerfile defines a variable called size and an array called mem[size] to store the values to be compared.


cshell.s:
Program whose object file is passed as first argument to the linker.
It sets the initial stack pointer to the eighth largest address value.

fibonacci.h:
Testfunction for the recursive fibonacci progression. The number of members calculated is defined by size.

fpga_fehler.h:
Program currently causing an error on the FPGA-platform but not on the simulation.
Insertion of additional values (disabled here) resolves the mismatches when compared to the reference system or the simulation.

interpreter.c:
Creates a temporary file (temp_dump.mem) that has the same format as the fpga dump file (xx -> 00 and no comments).
Then each byte of the new file is interpreted as an ascii character. Every line contains one word; each numbered with the byte-address.

kmp_search.h:
Implementation of a modified faster version of the Knuth-Morris-Pratt search algorithm, giving as return value the starting position of a certain sequence within an array of symbols.
The goto-statement was tested with this.

led.h:
Headerfile to implement the functionality of the 4 leds in programs loaded into the FPGA.
Call by "led(nibble)" with nibble as pseudo variable type encoding for the 4 leds.

linker.txt:
Linker script defining the addresses and sizes of the data and instruction image and also the sections to assign.
Implementation as additional argument in the linker options.

Makefile:
"make":	Compilation of the C-files marked as target (and object-) files in the Makefile. 
Also creates the instruction and the data image file for the simulation and also the svf-file for the FPGA.
The binutil's path and the cross-gcc's path must be adjusted first!
"make compare": compilation and run of the tn_compare-program. For this the tested program has to be implemented as headerfile in the tn_compare.c -file.

maze.h:
Backtracking algorithm to find the way to a defined target (Z) through a maze.

operators.h:
Test of several logic and bit operators.

prime.h:
Simple test for prime numbers. This program currently causes an error when forwarding is switched on.

stdp_simple.h:
Program implementing a simple lookup-table based stdp-algorithm.
The initial weights and correlation values still have to be included as header-files.
They can be generated by the zufall.c-program in the maybe_useful folder.
The seeds may have to be adjusted.

stdp_packed:
Progam implementing a lookup-table based stdp-algorithm.
The initial weights and correlation values to be included as header-files are packed as 32bit volatile unsigned ints with 8 weights and 16bit unsigned short ints as 8 correlation-values.
They can be created by the umwandlung.c-program in the maybe_useful folder.

switch.h:
Test of the switch statement which caused an error in a previous version of the s2pp.

timerfunktion.h:
Header-file to implement time measurements in a test program.
This header must not be implemented when using the tn_compare program.
time_base_t defines the variable type of the time (64bit)
The call of get_time_base() is to get the current timevalue.
time_measured is a global variable to run the program time_readout later on.
The transformation of the clock-cycles to the actual time still has to be done manually depending on the frequency of the test platform.
The inconsistent behaviour when using the upper 32bit of the timing-registers in long FPGA-simulations has to be checked.

timer_readout.c:
Program to read out the 8 byte of the time registers from the memory address of the simulation's dump-file where the 64bit variable time_measured is stored.

tn_compare.c:
Program to run the implemented testprogram (as headerfile) on the reference system and to compare the results stored in an array of integer values (mem[])  with the results of the s2pp-simulation.
IMPORTANT: The testprogram is called by test_function(); the size of the array of results is defined by a variable called "size".
	So in the headerfile the number of integer values stored in the array has to be defined as size and the array has to be defined as mem[size].

tn_testflow.c
Wrapper for the test-program to perform the s2pp-simulation.
The test-program is called again by "test_function()" included in the same way as in tn_compare (as headerfile).

maybe_useful/error_shiftoperator.h:
Program causing different interpretations of a 32bit shift by the native gcc-compiler and the gcc-cross-compiler (4.6.0)

maybe_useful/justfill.c:
Program just storing increasing numbers into the mem[]-array.

maybe_useful/testwrapper.c:
Program just to wrap the test_function()-call in the headerfile for a run on the reference system for debugging and compile purpose before actual rest-runs on the s2pp or with the tn_compare.c -program.

