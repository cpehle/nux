diff -rupN binutils-2.25/etc/config.log patched.binutils-2.25/etc/config.log
--- binutils-2.25/etc/config.log	1970-01-01 01:00:00.000000000 +0100
+++ patched.binutils-2.25/etc/config.log	2015-04-13 17:24:49.699522195 +0200
@@ -0,0 +1,137 @@
+This file contains any messages produced by compilers while
+running configure, to aid debugging if configure makes a mistake.
+
+It was created by configure, which was
+generated by GNU Autoconf 2.64.  Invocation command line was
+
+  $ /wang/users/sfriedma/s2pp-cross-comp/s2pp-gcc-work/binutils-2.25/etc/configure --cache-file=./config.cache --with-gnu-as --with-gnu-ld --with-system-zlib --prefix=/wang/users/sfriedma/s2pp-cross-comp/install --program-transform-name=s&^&powerpc-linux-eabi-& --disable-option-checking --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=powerpc-linux-eabi --srcdir=.././etc
+
+## --------- ##
+## Platform. ##
+## --------- ##
+
+hostname = nmpm1nuc1
+uname -m = x86_64
+uname -r = 3.16.0-4-amd64
+uname -s = Linux
+uname -v = #1 SMP Debian 3.16.7-ckt4-3 (2015-02-03)
+
+/usr/bin/uname -p = unknown
+/bin/uname -X     = unknown
+
+/bin/arch              = unknown
+/usr/bin/arch -k       = unknown
+/usr/convex/getsysinfo = unknown
+/usr/bin/hostinfo      = unknown
+/bin/machine           = unknown
+/usr/bin/oslevel       = unknown
+/bin/universe          = unknown
+
+PATH: /afs/kip.uni-heidelberg.de/projects/vision/definst_software/software/egal/waf/20150309
+PATH: /usr/local/bin
+PATH: /usr/bin
+PATH: /bin
+PATH: /usr/local/games
+PATH: /usr/games
+PATH: /afs/kip.uni-heidelberg.de/projects/vision/definst_software/software/egal/wtf/0.0.1/bin
+
+
+## ----------- ##
+## Core tests. ##
+## ----------- ##
+
+configure:1564: loading cache ./config.cache
+configure:1683: checking for a BSD-compatible install
+configure:1751: result: /usr/bin/install -c
+configure:1923: creating ./config.status
+
+## ---------------------- ##
+## Running config.status. ##
+## ---------------------- ##
+
+This file was extended by config.status, which was
+generated by GNU Autoconf 2.64.  Invocation command line was
+
+  CONFIG_FILES    = 
+  CONFIG_HEADERS  = 
+  CONFIG_LINKS    = 
+  CONFIG_COMMANDS = 
+  $ ./config.status 
+
+on nmpm1nuc1
+
+config.status:715: creating Makefile
+
+## ---------------- ##
+## Cache variables. ##
+## ---------------- ##
+
+ac_cv_env_build_alias_set=set
+ac_cv_env_build_alias_value=x86_64-unknown-linux-gnu
+ac_cv_env_host_alias_set=set
+ac_cv_env_host_alias_value=x86_64-unknown-linux-gnu
+ac_cv_env_target_alias_set=set
+ac_cv_env_target_alias_value=powerpc-linux-eabi
+
+## ----------------- ##
+## Output variables. ##
+## ----------------- ##
+
+DEFS='-DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\"'
+ECHO_C=''
+ECHO_N='-n'
+ECHO_T=''
+INSTALL_DATA='/usr/bin/install -c -m 644'
+INSTALL_PROGRAM='/usr/bin/install -c'
+INSTALL_SCRIPT='/usr/bin/install -c'
+LIBOBJS=''
+LIBS=''
+LTLIBOBJS=''
+MAINT='#'
+PACKAGE_BUGREPORT=''
+PACKAGE_NAME=''
+PACKAGE_STRING=''
+PACKAGE_TARNAME=''
+PACKAGE_URL=''
+PACKAGE_VERSION=''
+PATH_SEPARATOR=':'
+SHELL='/bin/bash'
+bindir='${exec_prefix}/bin'
+build_alias='x86_64-unknown-linux-gnu'
+datadir='${datarootdir}'
+datarootdir='${prefix}/share'
+docdir='${datarootdir}/doc/${PACKAGE}'
+dvidir='${docdir}'
+exec_prefix='${prefix}'
+host_alias='x86_64-unknown-linux-gnu'
+htmldir='${docdir}'
+includedir='${prefix}/include'
+infodir='${datarootdir}/info'
+libdir='${exec_prefix}/lib'
+libexecdir='${exec_prefix}/libexec'
+localedir='${datarootdir}/locale'
+localstatedir='${prefix}/var'
+mandir='${datarootdir}/man'
+oldincludedir='/usr/include'
+pdfdir='${docdir}'
+prefix='/wang/users/sfriedma/s2pp-cross-comp/install'
+program_transform_name='s&^&powerpc-linux-eabi-&'
+psdir='${docdir}'
+sbindir='${exec_prefix}/sbin'
+sharedstatedir='${prefix}/com'
+sysconfdir='${prefix}/etc'
+target_alias='powerpc-linux-eabi'
+
+## ----------- ##
+## confdefs.h. ##
+## ----------- ##
+
+/* confdefs.h */
+#define PACKAGE_NAME ""
+#define PACKAGE_TARNAME ""
+#define PACKAGE_VERSION ""
+#define PACKAGE_STRING ""
+#define PACKAGE_BUGREPORT ""
+#define PACKAGE_URL ""
+
+configure: exit 0
diff -rupN binutils-2.25/include/opcode/ppc.h patched.binutils-2.25/include/opcode/ppc.h
--- binutils-2.25/include/opcode/ppc.h	2014-10-14 09:32:04.000000000 +0200
+++ patched.binutils-2.25/include/opcode/ppc.h	2015-04-14 11:18:35.153668998 +0200
@@ -195,6 +195,9 @@ extern const int vle_num_opcodes;
    that isn't a superset of POWER8, we can define this to its own mask.  */
 #define PPC_OPCODE_HTM        PPC_OPCODE_POWER8
 
+/* s2pp: Opcode which is supported by the Human Brain Project's s2pp processor. */
+#define PPC_OPCODE_S2PP       PPC_OPCODE_PPC
+
 /* A macro to extract the major opcode from an instruction.  */
 #define PPC_OP(i) (((i) >> 26) & 0x3f)
 
@@ -380,6 +383,9 @@ extern const unsigned int num_powerpc_op
 
 /* This is a CR FIELD that does not use symbolic names.  */
 #define PPC_OPERAND_CR_REG (0x200000)
+
+/* s2pp: This is a fixed-point vector register. */
+#define PPC_OPERAND_FXV_REG (0x400000)
 
 /* The POWER and PowerPC assemblers use a few macros.  We keep them
    with the operands table for simplicity.  The macro table is an
diff -rupN binutils-2.25/opcodes/ppc-opc.c patched.binutils-2.25/opcodes/ppc-opc.c
--- binutils-2.25/opcodes/ppc-opc.c	2014-12-23 09:47:10.000000000 +0100
+++ patched.binutils-2.25/opcodes/ppc-opc.c	2015-04-14 11:27:58.254184551 +0200
@@ -866,6 +866,26 @@ const struct powerpc_operand powerpc_ope
 
 #define ERAT_T UIM + 1
   { 0x7, 21, NULL, NULL, 0 },
+
+  /* s2pp: RT field of FXV form instructions. */
+#define FXVRT ERAT_T + 1
+  { 0x1f, 21, NULL, NULL, PPC_OPERAND_FXV_REG },
+
+  /* s2pp: RA field of FXV form instructions. */
+#define FXVRA FXVRT + 1
+  { 0x1f, 16, NULL, NULL, PPC_OPERAND_FXV_REG },
+
+  /* s2pp: RB field of FXV form instructions. */
+#define FXVRB FXVRA + 1
+  { 0x1f, 11, NULL, NULL, PPC_OPERAND_FXV_REG },
+
+  /* s2pp: COND field in FXV form instructions. */
+#define FXVCOND FXVRB + 1
+  { 0x3, 0, NULL, NULL, PPC_OPERAND_OPTIONAL }
+
+#define FXVSH HTM_SI
+/*#define FXVSH FXVCOND + 1*/
+  /*{ 0x1f, 11, NULL, NULL, PPC_OPERAND_SIGNED }*/
 };
 
 const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)
@@ -2628,6 +2648,17 @@ extract_vleil (unsigned long insn,
 /* The mask for a G form instruction. rc not supported at present.  */
 #define XW_MASK XW (0x3f, 0x3f, 0)
 
+/* s2pp: An FXV form instruction. */
+#define FXV(op, xop) (OP (op) | (((unsigned long)(xop) & 0x1ff) << 2))
+#define FXV_MASK FXV (0x3f, 0x1ff)
+
+/* s2pp: Conditional codes for FXV form instructions. */
+#define FXV_COND_NULL (0x0)
+#define FXV_COND_GT (0x1)
+#define FXV_COND_LT (0x2)
+#define FXV_COND_EQ (0x3)
+
+
 /* An APU form instruction.  */
 #define APU(op, xop, rc) (OP (op) | (((unsigned long)(xop)) & 0x3ff) << 1 | ((rc) & 1))
 
@@ -2756,6 +2787,7 @@ extract_vleil (unsigned long insn,
 #define E6500	PPC_OPCODE_E6500
 #define PPCVLE  PPC_OPCODE_VLE
 #define PPCHTM  PPC_OPCODE_HTM
+#define PPCS2PP PPC_OPCODE_S2PP
 
 /* The opcode table.
 
@@ -3078,6 +3110,63 @@ const struct powerpc_opcode powerpc_opco
 {"evfsctsi",	VX (4, 661),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RB}},
 {"evfsctuf",	VX (4, 662),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RB}},
 {"evfsctsf",	VX (4, 663),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RB}},
+
+/* s2pp instructions */
+{"fxvmahm",	FXV(4, 12),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmabm",	FXV(4, 13),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmtach",	FXV(4, 15),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvmahfs",	FXV(4, 28),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmabfs",	FXV(4, 29),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmtacbf",	FXV(4, 30),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvmtachf",	FXV(4, 31),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvmatachm",	FXV(4, 44),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmatacbm",	FXV(4, 45),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmatachfs",	FXV(4, 60),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmatacbfs",	FXV(4, 61),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmulhm",	FXV(4, 76),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmulbm",	FXV(4, 77),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmulhfs",	FXV(4, 92),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmulbfs",	FXV(4, 93),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvmultachm",	FXV(4, 108),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmultacbm",	FXV(4, 109),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmultachfs",FXV(4, 124),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvmultacbfs",FXV(4, 125),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvinx",	FXV(4, 236),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA0, RB, FXVCOND}},
+{"fxvpckbu",	FXV(4, 239),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA, RB, FXVCOND}},
+{"fxvoutx",	FXV(4, 252),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA0, RB, FXVCOND}},
+{"fxvpckbl",	FXV(4, 255),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA, RB, FXVCOND}},
+{"fxvsplath",	FXV(4, 268),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA}},
+{"fxvsplatb",	FXV(4, 269),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA}},
+{"fxvupckbr",	FXV(4, 271),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA, RB, FXVCOND}},
+{"fxvupckbl",	FXV(4, 287),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA, RB, FXVCOND}},
+{"fxvcmph",     FXV(4, 300),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA}},
+{"fxvcmpb",     FXV(4, 301),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA}},
+{"fxvshh",      FXV(4, 316),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVSH}},
+{"fxvshb",      FXV(4, 317),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVSH}},
+{"fxvsel",      FXV(4, 319),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvsubhm",	FXV(4, 332),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvsubbm",	FXV(4, 333),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvsubhfs",	FXV(4, 348),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvsubbfs",	FXV(4, 349),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvaddactachm",FXV(4, 364),   FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvaddactach",FXV(4, 364),   FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvaddactacb",FXV(4, 365),   FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvaddactachf",FXV(4, 380),   FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvaddactacbf",FXV(4, 381),   FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVCOND}},
+{"fxvaddachm",	FXV(4, 396),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVCOND}},
+{"fxvaddacbm",	FXV(4, 397),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVCOND}},
+{"fxvaddachfs",	FXV(4, 412),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVCOND}},
+{"fxvaddacbfs",	FXV(4, 413),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVCOND}},
+{"fxvaddtachm",	FXV(4, 428),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvaddtach",	FXV(4, 428),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvaddtacb",	FXV(4, 429),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRA, FXVRB, FXVCOND}},
+{"fxvaddhm",	FXV(4, 460),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvaddbm",	FXV(4, 461),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvaddhfs",	FXV(4, 476),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvaddbfs",	FXV(4, 477),    FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, FXVRA, FXVRB, FXVCOND}},
+{"fxvlax",	FXV(4, 492),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA0, RB, FXVCOND}},
+{"fxvstax",	FXV(4, 508),	FXV_MASK,    PPCS2PP,       PPCNONE,    {FXVRT, RA0, RB, FXVCOND}},
+
 {"evfsctuiz",	VX (4, 664),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RB}},
 {"put",		APU(4, 332,0),	APU_RT_MASK, PPC405,	PPCNONE,	{RA, FSL}},
 {"evfsctsiz",	VX (4, 666),	VX_MASK,     PPCSPE|PPCVLE, PPCNONE,	{RS, RB}},
